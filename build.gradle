plugins {
    id 'java'
    id 'jacoco'
    id 'java-library'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
}

allprojects {
    version = '1.0'
    group = 'com.bank'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.projectlombok:lombok'
        implementation 'org.mapstruct:mapstruct:1.6.3'
        implementation 'org.apache.commons:commons-lang3:3.17.0'

        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        testImplementation 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        testAnnotationProcessor 'org.projectlombok:lombok'

    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
            xml.outputLocation.set(layout.buildDirectory.file("report.xml"))
            html.outputLocation.set(layout.buildDirectory.dir("reports/html"))
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        '**/*$*.*',
                ])
            }))
        }
    }

    bootJar {
        enabled = true
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
        reportsDirectory = layout.buildDirectory.dir("reports") as Directory
    }
}

bootJar {
    enabled = false
}

